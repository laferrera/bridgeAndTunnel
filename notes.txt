// to mess around
    https://codesandbox.io/s/retejs-react-render-t899c?file=/src/rete.jsx:1619-1940    


input[1].mode('change', 1.0, 0.1, 'rising')
input[1].change = function (state) print("{state:".. input[1].volts .. "}") end



input[1].change = function (state) print("{crow{id} output{id}:".. input[1].volts .. "}") end

s2 = `input[2].mode('change', 1.0, 0.1, 'rising');
input[2].change = function (state) print('Hello, Jason!') end;`





// crow stuff...

let crow;
hugAndMun().then((myCrow) => {
    crow = myCrow;
    this.crow.setCallback(callBack)
})


s = `input[1].mode('change', 1.0, 0.1, 'rising');
input[1].change = function (state) print('Hello, Molly!') end;`


s2 = `input[2].mode('change', 1.0, 0.1, 'rising');
input[2].change = function (state) print('Hello, Jason!') end;`

crow.writeLines(s);

// the whole serialport thing is a mess...
// can i use an older version of serial port that doesn't include arm64?
// https://github.com/serialport/bindings-cpp/pull/18/files

// when we npm install serialport, then Hug&Mun won't try to install as a dependency...
// so those versions have to match
// https://copyprogramming.com/howto/electron-and-serial-ports
// and then webpack looks for external, so thats good...
// and then maybe we need to do electron forge build step to copy over?
// https://github.com/serialport/node-serialport/issues/2464#issuecomment-1334140064

let newCrow; const hugAndMun = require('./index'); hugAndMun().then((crow) => { newCrow = crow; console.log("we set it?", newCrow)})



models
    node
    route
    
nodes (source )
    midi in /out 
    osc in / out
    grid 
    crow
    clock 
    ableton link
    
node (effect)
    math
    quantizer
    random
    sequencer

osc settings
    ip
    port
    min
    max
    pattern
    curve

midi settings
    type
        note # 
        cc
        input 
            virtual port
            other devices            
    message type
        hold
        on/off
    channel
        1-16
    mpe
        ......
    
    